" Polyglot
let g:polyglot_disabled = ['autoindent']

syntax enable
set number
set relativenumber
set tabstop=4 shiftwidth=4
set backspace=indent,eol,start
set autoindent
set showmatch
set nowrap
set noswapfile
set incsearch
set hlsearch
filetype plugin indent on
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8
let mapleader = ' '
set mouse=a
set clipboard+=unnamedplus
set foldmethod=indent
set foldlevelstart=99
set termguicolors
set formatoptions-=cro
set cursorline
set cursorcolumn
set complete+=kspell
set completeopt=menuone,longest
set shortmess+=c
set list
set listchars=tab:•·
set background=dark
set splitbelow
set splitright
highlight Comment cterm=italic gui=italic

" Download Vim Plug if not exist
let need_to_install_plugins = 0
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

" Vim Plug
call plug#begin('~/.config/nvim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/tagbar'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'joshdick/onedark.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-syntastic/syntastic'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'andrewstuart/vim-kubernetes'
Plug 'mboughaba/i3config.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'voldikss/vim-floaterm'
call plug#end()

" NERDCommenter
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv
nnoremap <C-/> <Plug>NERDCommenterToggle
vnoremap <C-/> <Plug>NERDCommenterToggle<CR>gv
let g:NERDDefaultAlign = 'left'

" NERDTree
let NERDTreeQuitOnOpen=1
let g:NERDTreeMinimalUI=1
nnoremap <F2> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let g:NERDTreeIgnore=['__pycache__','.git','.github','.DS_Store']
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" DevIcons
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_conceal_nerdtree_brackets = 1

" Git Gutter
highlight GitGutterAdd guifg=#009900 ctermfg=Green
highlight GitGutterChange guifg=#bbbb00 ctermfg=Yellow
highlight GitGutterDelete guifg=#ff2222 ctermfg=Red
nmap ) <Plug>(GitGutterNextHunk)
nmap ( <Plug>(GitGutterPrevHunk)
let g:gitgutter_enabled = 1
let g:gitgutter_map_keys = 0

" FZF
"let g:fzf_layout = { 'down': '15%' }
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.7 } }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
nnoremap <C-o> :Files<CR>

" Vim Airline
let g:airline_theme = "onedark"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tabline#fnamemode = ':t'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_filetype_overrides = {'nerdtree': [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]}
let g:airline_mode_map = {
      \ '__'     : '-',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'I',
      \ 'ix'     : 'I',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'N',
      \ 'no'     : 'N',
      \ 'R'      : 'R',
      \ 'Rv'     : 'R',
      \ 's'      : 'S',
      \ 'S'      : 'S',
      \ 't'      : 'T',
      \ 'v'      : 'V',
      \ 'V'      : 'V',
      \ }

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_go_checkers = ['go', 'golint', 'errcheck']
let g:syntastic_python_flake8_post_args="--max-line-length=120"
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
"let g:syntastic_quiet_messages = { 'regex': 'W191\|E117\|E265\|E302\|E305\|E501\|E231\|E225' }
let g:syntastic_quiet_messages = { 'regex': 'E501' }
function! ToggleSyntastic()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            lclose
            return
        endif
    endfor
    SyntasticCheck
endfunction

" Color Scheme
colorscheme onedark
let g:onedark_terminal_italics=1

" Set Indent on File Read and Delete Trailing Space
au BufNewFile,BufRead *.py set autoindent tabstop=4 softtabstop=4 shiftwidth=4 expandtab
au BufNewFile,BufRead *.go set autoindent tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
au BufNewFile,BufRead *.{yaml,yml} set autoindent tabstop=2 softtabstop=2 shiftwidth=2 expandtab
au BufNewFile,BufRead *.json set autoindent tabstop=4 softtabstop=4 shiftwidth=4 expandtab
au BufNewFile,BufRead *.rasi setf css
au BufNewFile,BufRead *.rasi set autoindent tabstop=2 softtabstop=2 shiftwidth=2 expandtab
au BufWritePre,BufRead * :%s/\s\+$//e

" Set color on i3 Configuration
aug i3config_ft_detection
	au!
	au BufNewFile,BufRead ~/.config/i3/config set filetype=i3config
	au BufNewFile,BufRead ~/Projects/dotfiles/i3/config set filetype=i3config
	au BufNewFile,BufRead i3/config set filetype=i3config
aug end

" Floaterm
let g:floaterm_keymap_toggle = '<F3>'
let g:floaterm_autoclose = 2
let g:floaterm_title = ""

"Custom Command
command! Reload execute "source ~/.config/nvim/init.vim"
command! Vimrc execute ":e ~/.config/nvim/init.vim"

" Custom Keybinding
nnoremap <leader>` :noh<CR>
"nnoremap <F3> :FloatermToggle<CR>
nnoremap <F5> :!go run %<CR>
nnoremap <F6> za
nnoremap <F7> :call ToggleSyntastic()<CR>
nnoremap <F8> :TagbarToggle<CR>

" Split Keybinding
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>
nnoremap <leader>q <C-w>q
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Navigation on Insert Mode Keybinding
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

" Auto Pairs
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap ' ''<Left>
inoremap " ""<Left>
inoremap < <><Left>

" Tabs Keybinding
nnoremap <leader>1 :bp<CR>
nnoremap <leader>2 :bn<CR>
nnoremap <leader>w :bd<CR>

" Autocomplete Keybinding
inoremap <C-Space> <C-n>
inoremap <expr> <CR> pumvisible() ? "<C-y>" : "<CR>"
inoremap <expr> <TAB> pumvisible() ? "<C-n>" : "<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "<C-p>" : "<TAB>"

" Template Keybinding
nnoremap \py :-1read $HOME/.config/nvim/template/py<CR>2jf:a
nnoremap \go :-1read $HOME/.config/nvim/template/go<CR>7ja
nnoremap \html :-1read $HOME/.config/nvim/template/html<CR>3jf>a
